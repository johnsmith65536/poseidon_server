// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - UserIdSend
//  - UserIdRecv
//  - CreateTime
//  - Status
type UserRelation struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  UserIdSend int64 `thrift:"UserIdSend,2" db:"UserIdSend" json:"UserIdSend"`
  UserIdRecv int64 `thrift:"UserIdRecv,3" db:"UserIdRecv" json:"UserIdRecv"`
  CreateTime int64 `thrift:"CreateTime,4" db:"CreateTime" json:"CreateTime"`
  Status int32 `thrift:"Status,5" db:"Status" json:"Status"`
}

func NewUserRelation() *UserRelation {
  return &UserRelation{}
}


func (p *UserRelation) GetID() int64 {
  return p.ID
}

func (p *UserRelation) GetUserIdSend() int64 {
  return p.UserIdSend
}

func (p *UserRelation) GetUserIdRecv() int64 {
  return p.UserIdRecv
}

func (p *UserRelation) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *UserRelation) GetStatus() int32 {
  return p.Status
}
func (p *UserRelation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRelation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserRelation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserIdSend = v
}
  return nil
}

func (p *UserRelation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserIdRecv = v
}
  return nil
}

func (p *UserRelation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *UserRelation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UserRelation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRelation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRelation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *UserRelation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdSend", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserIdSend: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdSend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdSend (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserIdSend: ", p), err) }
  return err
}

func (p *UserRelation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdRecv", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:UserIdRecv: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdRecv)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdRecv (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:UserIdRecv: ", p), err) }
  return err
}

func (p *UserRelation) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:CreateTime: ", p), err) }
  return err
}

func (p *UserRelation) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Status: ", p), err) }
  return err
}

func (p *UserRelation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRelation(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserIdSend
//  - UserIdRecv
//  - GroupId
//  - Content
//  - CreateTime
//  - MsgType
//  - IsRead
type Message struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  UserIdSend int64 `thrift:"UserIdSend,2" db:"UserIdSend" json:"UserIdSend"`
  UserIdRecv int64 `thrift:"UserIdRecv,3" db:"UserIdRecv" json:"UserIdRecv"`
  GroupId int64 `thrift:"GroupId,4" db:"GroupId" json:"GroupId"`
  Content string `thrift:"Content,5" db:"Content" json:"Content"`
  CreateTime int64 `thrift:"CreateTime,6" db:"CreateTime" json:"CreateTime"`
  MsgType int32 `thrift:"MsgType,7" db:"MsgType" json:"MsgType"`
  IsRead int32 `thrift:"IsRead,8" db:"IsRead" json:"IsRead"`
}

func NewMessage() *Message {
  return &Message{}
}


func (p *Message) GetID() int64 {
  return p.ID
}

func (p *Message) GetUserIdSend() int64 {
  return p.UserIdSend
}

func (p *Message) GetUserIdRecv() int64 {
  return p.UserIdRecv
}

func (p *Message) GetGroupId() int64 {
  return p.GroupId
}

func (p *Message) GetContent() string {
  return p.Content
}

func (p *Message) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *Message) GetMsgType() int32 {
  return p.MsgType
}

func (p *Message) GetIsRead() int32 {
  return p.IsRead
}
func (p *Message) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Message)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Message)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserIdSend = v
}
  return nil
}

func (p *Message)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserIdRecv = v
}
  return nil
}

func (p *Message)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *Message)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *Message)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Message)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MsgType = v
}
  return nil
}

func (p *Message)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsRead = v
}
  return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdSend", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserIdSend: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdSend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdSend (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserIdSend: ", p), err) }
  return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdRecv", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:UserIdRecv: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdRecv)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdRecv (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:UserIdRecv: ", p), err) }
  return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("GroupId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:GroupId: ", p), err) }
  if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.GroupId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:GroupId: ", p), err) }
  return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Content", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Content (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Content: ", p), err) }
  return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:CreateTime: ", p), err) }
  return err
}

func (p *Message) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:MsgType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MsgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:MsgType: ", p), err) }
  return err
}

func (p *Message) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IsRead", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:IsRead: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsRead)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IsRead (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:IsRead: ", p), err) }
  return err
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - Password
//  - NickName
type CreateUserReq struct {
  Password string `thrift:"Password,1" db:"Password" json:"Password"`
  NickName string `thrift:"NickName,2" db:"NickName" json:"NickName"`
}

func NewCreateUserReq() *CreateUserReq {
  return &CreateUserReq{}
}


func (p *CreateUserReq) GetPassword() string {
  return p.Password
}

func (p *CreateUserReq) GetNickName() string {
  return p.NickName
}
func (p *CreateUserReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *CreateUserReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NickName = v
}
  return nil
}

func (p *CreateUserReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Password: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("NickName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:NickName: ", p), err) }
  if err := oprot.WriteString(string(p.NickName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.NickName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:NickName: ", p), err) }
  return err
}

func (p *CreateUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserReq(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Status
type CreateUserResp struct {
  UserId int64 `thrift:"UserId,1" db:"UserId" json:"UserId"`
  Status int32 `thrift:"Status,2" db:"Status" json:"Status"`
}

func NewCreateUserResp() *CreateUserResp {
  return &CreateUserResp{}
}


func (p *CreateUserResp) GetUserId() int64 {
  return p.UserId
}

func (p *CreateUserResp) GetStatus() int32 {
  return p.Status
}
func (p *CreateUserResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *CreateUserResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *CreateUserResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUserResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserId: ", p), err) }
  return err
}

func (p *CreateUserResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Status: ", p), err) }
  return err
}

func (p *CreateUserResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserResp(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Password
type LoginReq struct {
  UserId int64 `thrift:"UserId,1" db:"UserId" json:"UserId"`
  Password string `thrift:"Password,2" db:"Password" json:"Password"`
}

func NewLoginReq() *LoginReq {
  return &LoginReq{}
}


func (p *LoginReq) GetUserId() int64 {
  return p.UserId
}

func (p *LoginReq) GetPassword() string {
  return p.Password
}
func (p *LoginReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *LoginReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserId: ", p), err) }
  return err
}

func (p *LoginReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Password: ", p), err) }
  return err
}

func (p *LoginReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginReq(%+v)", *p)
}

// Attributes:
//  - Success
type LoginResp struct {
  Success bool `thrift:"Success,1" db:"Success" json:"Success"`
}

func NewLoginResp() *LoginResp {
  return &LoginResp{}
}


func (p *LoginResp) GetSuccess() bool {
  return p.Success
}
func (p *LoginResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *LoginResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Success", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Success: ", p), err) }
  if err := oprot.WriteBool(bool(p.Success)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Success (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Success: ", p), err) }
  return err
}

func (p *LoginResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginResp(%+v)", *p)
}

// Attributes:
//  - UserId
type LogoutReq struct {
  UserId int64 `thrift:"UserId,1" db:"UserId" json:"UserId"`
}

func NewLogoutReq() *LogoutReq {
  return &LogoutReq{}
}


func (p *LogoutReq) GetUserId() int64 {
  return p.UserId
}
func (p *LogoutReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogoutReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *LogoutReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogoutReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogoutReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserId: ", p), err) }
  return err
}

func (p *LogoutReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogoutReq(%+v)", *p)
}

type LogoutResp struct {
}

func NewLogoutResp() *LogoutResp {
  return &LogoutResp{}
}

func (p *LogoutResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogoutResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogoutResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogoutResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogoutResp(%+v)", *p)
}

// Attributes:
//  - UserIdSend
//  - IdRecv
//  - Content
//  - ContentType
//  - MessageType
type SendMessageReq struct {
  UserIdSend int64 `thrift:"UserIdSend,1" db:"UserIdSend" json:"UserIdSend"`
  IdRecv int64 `thrift:"IdRecv,2" db:"IdRecv" json:"IdRecv"`
  Content string `thrift:"Content,3" db:"Content" json:"Content"`
  ContentType int32 `thrift:"ContentType,4" db:"ContentType" json:"ContentType"`
  MessageType int32 `thrift:"MessageType,5" db:"MessageType" json:"MessageType"`
}

func NewSendMessageReq() *SendMessageReq {
  return &SendMessageReq{}
}


func (p *SendMessageReq) GetUserIdSend() int64 {
  return p.UserIdSend
}

func (p *SendMessageReq) GetIdRecv() int64 {
  return p.IdRecv
}

func (p *SendMessageReq) GetContent() string {
  return p.Content
}

func (p *SendMessageReq) GetContentType() int32 {
  return p.ContentType
}

func (p *SendMessageReq) GetMessageType() int32 {
  return p.MessageType
}
func (p *SendMessageReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendMessageReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserIdSend = v
}
  return nil
}

func (p *SendMessageReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdRecv = v
}
  return nil
}

func (p *SendMessageReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *SendMessageReq)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ContentType = v
}
  return nil
}

func (p *SendMessageReq)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MessageType = v
}
  return nil
}

func (p *SendMessageReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessageReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendMessageReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdSend", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserIdSend: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdSend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdSend (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserIdSend: ", p), err) }
  return err
}

func (p *SendMessageReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IdRecv", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:IdRecv: ", p), err) }
  if err := oprot.WriteI64(int64(p.IdRecv)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IdRecv (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:IdRecv: ", p), err) }
  return err
}

func (p *SendMessageReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Content", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Content (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Content: ", p), err) }
  return err
}

func (p *SendMessageReq) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ContentType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ContentType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ContentType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ContentType: ", p), err) }
  return err
}

func (p *SendMessageReq) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MessageType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:MessageType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MessageType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MessageType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:MessageType: ", p), err) }
  return err
}

func (p *SendMessageReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendMessageReq(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreateTime
type SendMessageResp struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  CreateTime int64 `thrift:"CreateTime,2" db:"CreateTime" json:"CreateTime"`
}

func NewSendMessageResp() *SendMessageResp {
  return &SendMessageResp{}
}


func (p *SendMessageResp) GetID() int64 {
  return p.ID
}

func (p *SendMessageResp) GetCreateTime() int64 {
  return p.CreateTime
}
func (p *SendMessageResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendMessageResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SendMessageResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *SendMessageResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessageResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendMessageResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *SendMessageResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CreateTime: ", p), err) }
  return err
}

func (p *SendMessageResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendMessageResp(%+v)", *p)
}

// Attributes:
//  - MsgId
type MessageDeliveredReq struct {
  MsgId int64 `thrift:"MsgId,1" db:"MsgId" json:"MsgId"`
}

func NewMessageDeliveredReq() *MessageDeliveredReq {
  return &MessageDeliveredReq{}
}


func (p *MessageDeliveredReq) GetMsgId() int64 {
  return p.MsgId
}
func (p *MessageDeliveredReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageDeliveredReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MsgId = v
}
  return nil
}

func (p *MessageDeliveredReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageDeliveredReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageDeliveredReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MsgId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MsgId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MsgId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MsgId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MsgId: ", p), err) }
  return err
}

func (p *MessageDeliveredReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageDeliveredReq(%+v)", *p)
}

// Attributes:
//  - Status
type MessageDeliveredResp struct {
  Status int32 `thrift:"Status,1" db:"Status" json:"Status"`
}

func NewMessageDeliveredResp() *MessageDeliveredResp {
  return &MessageDeliveredResp{}
}


func (p *MessageDeliveredResp) GetStatus() int32 {
  return p.Status
}
func (p *MessageDeliveredResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageDeliveredResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *MessageDeliveredResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageDeliveredResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageDeliveredResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err) }
  return err
}

func (p *MessageDeliveredResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageDeliveredResp(%+v)", *p)
}

// Attributes:
//  - UserId
type HeartBeatReq struct {
  UserId int64 `thrift:"UserId,1" db:"UserId" json:"UserId"`
}

func NewHeartBeatReq() *HeartBeatReq {
  return &HeartBeatReq{}
}


func (p *HeartBeatReq) GetUserId() int64 {
  return p.UserId
}
func (p *HeartBeatReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartBeatReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *HeartBeatReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeatReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartBeatReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserId: ", p), err) }
  return err
}

func (p *HeartBeatReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartBeatReq(%+v)", *p)
}

type HeartBeatResp struct {
}

func NewHeartBeatResp() *HeartBeatResp {
  return &HeartBeatResp{}
}

func (p *HeartBeatResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartBeatResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeatResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartBeatResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartBeatResp(%+v)", *p)
}

// Attributes:
//  - UserId
type FetchFriendsListReq struct {
  UserId int64 `thrift:"UserId,1" db:"UserId" json:"UserId"`
}

func NewFetchFriendsListReq() *FetchFriendsListReq {
  return &FetchFriendsListReq{}
}


func (p *FetchFriendsListReq) GetUserId() int64 {
  return p.UserId
}
func (p *FetchFriendsListReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchFriendsListReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *FetchFriendsListReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchFriendsListReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchFriendsListReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserId: ", p), err) }
  return err
}

func (p *FetchFriendsListReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchFriendsListReq(%+v)", *p)
}

// Attributes:
//  - OnlineUserIds
//  - OfflineUserIds
type FetchFriendsListResp struct {
  OnlineUserIds []int64 `thrift:"OnlineUserIds,1" db:"OnlineUserIds" json:"OnlineUserIds"`
  OfflineUserIds []int64 `thrift:"OfflineUserIds,2" db:"OfflineUserIds" json:"OfflineUserIds"`
}

func NewFetchFriendsListResp() *FetchFriendsListResp {
  return &FetchFriendsListResp{}
}


func (p *FetchFriendsListResp) GetOnlineUserIds() []int64 {
  return p.OnlineUserIds
}

func (p *FetchFriendsListResp) GetOfflineUserIds() []int64 {
  return p.OfflineUserIds
}
func (p *FetchFriendsListResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchFriendsListResp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.OnlineUserIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.OnlineUserIds = append(p.OnlineUserIds, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchFriendsListResp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.OfflineUserIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.OfflineUserIds = append(p.OfflineUserIds, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchFriendsListResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchFriendsListResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchFriendsListResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OnlineUserIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OnlineUserIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.OnlineUserIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OnlineUserIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OnlineUserIds: ", p), err) }
  return err
}

func (p *FetchFriendsListResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OfflineUserIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:OfflineUserIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.OfflineUserIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OfflineUserIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:OfflineUserIds: ", p), err) }
  return err
}

func (p *FetchFriendsListResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchFriendsListResp(%+v)", *p)
}

// Attributes:
//  - UserId
//  - MessageId
//  - UserRelationId
type FetchOfflineMessageReq struct {
  UserId int64 `thrift:"UserId,1" db:"UserId" json:"UserId"`
  MessageId int64 `thrift:"MessageId,2" db:"MessageId" json:"MessageId"`
  UserRelationId int64 `thrift:"UserRelationId,3" db:"UserRelationId" json:"UserRelationId"`
}

func NewFetchOfflineMessageReq() *FetchOfflineMessageReq {
  return &FetchOfflineMessageReq{}
}


func (p *FetchOfflineMessageReq) GetUserId() int64 {
  return p.UserId
}

func (p *FetchOfflineMessageReq) GetMessageId() int64 {
  return p.MessageId
}

func (p *FetchOfflineMessageReq) GetUserRelationId() int64 {
  return p.UserRelationId
}
func (p *FetchOfflineMessageReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchOfflineMessageReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *FetchOfflineMessageReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *FetchOfflineMessageReq)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserRelationId = v
}
  return nil
}

func (p *FetchOfflineMessageReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchOfflineMessageReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchOfflineMessageReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserId: ", p), err) }
  return err
}

func (p *FetchOfflineMessageReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MessageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MessageId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MessageId: ", p), err) }
  return err
}

func (p *FetchOfflineMessageReq) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserRelationId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:UserRelationId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserRelationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserRelationId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:UserRelationId: ", p), err) }
  return err
}

func (p *FetchOfflineMessageReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchOfflineMessageReq(%+v)", *p)
}

// Attributes:
//  - Messages
//  - UserRelations
type FetchOfflineMessageResp struct {
  Messages []*Message `thrift:"Messages,1" db:"Messages" json:"Messages"`
  UserRelations []*UserRelation `thrift:"UserRelations,2" db:"UserRelations" json:"UserRelations"`
}

func NewFetchOfflineMessageResp() *FetchOfflineMessageResp {
  return &FetchOfflineMessageResp{}
}


func (p *FetchOfflineMessageResp) GetMessages() []*Message {
  return p.Messages
}

func (p *FetchOfflineMessageResp) GetUserRelations() []*UserRelation {
  return p.UserRelations
}
func (p *FetchOfflineMessageResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FetchOfflineMessageResp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Message, 0, size)
  p.Messages =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Message{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Messages = append(p.Messages, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchOfflineMessageResp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserRelation, 0, size)
  p.UserRelations =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &UserRelation{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.UserRelations = append(p.UserRelations, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FetchOfflineMessageResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchOfflineMessageResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FetchOfflineMessageResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Messages", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Messages: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Messages {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Messages: ", p), err) }
  return err
}

func (p *FetchOfflineMessageResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserRelations", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserRelations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserRelations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserRelations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserRelations: ", p), err) }
  return err
}

func (p *FetchOfflineMessageResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FetchOfflineMessageResp(%+v)", *p)
}

// Attributes:
//  - Data
//  - FileName
type UploadObjectReq struct {
  Data []byte `thrift:"Data,1" db:"Data" json:"Data"`
  FileName string `thrift:"FileName,2" db:"FileName" json:"FileName"`
}

func NewUploadObjectReq() *UploadObjectReq {
  return &UploadObjectReq{}
}


func (p *UploadObjectReq) GetData() []byte {
  return p.Data
}

func (p *UploadObjectReq) GetFileName() string {
  return p.FileName
}
func (p *UploadObjectReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UploadObjectReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *UploadObjectReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *UploadObjectReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadObjectReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UploadObjectReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Data: ", p), err) }
  return err
}

func (p *UploadObjectReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("FileName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:FileName: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.FileName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:FileName: ", p), err) }
  return err
}

func (p *UploadObjectReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UploadObjectReq(%+v)", *p)
}

// Attributes:
//  - Status
type UploadObjectResp struct {
  Status int32 `thrift:"Status,1" db:"Status" json:"Status"`
}

func NewUploadObjectResp() *UploadObjectResp {
  return &UploadObjectResp{}
}


func (p *UploadObjectResp) GetStatus() int32 {
  return p.Status
}
func (p *UploadObjectResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UploadObjectResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UploadObjectResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadObjectResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UploadObjectResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err) }
  return err
}

func (p *UploadObjectResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UploadObjectResp(%+v)", *p)
}

// Attributes:
//  - UserIdSend
//  - UserIdRecv
type AddFriendReq struct {
  UserIdSend int64 `thrift:"UserIdSend,1" db:"UserIdSend" json:"UserIdSend"`
  UserIdRecv int64 `thrift:"UserIdRecv,2" db:"UserIdRecv" json:"UserIdRecv"`
}

func NewAddFriendReq() *AddFriendReq {
  return &AddFriendReq{}
}


func (p *AddFriendReq) GetUserIdSend() int64 {
  return p.UserIdSend
}

func (p *AddFriendReq) GetUserIdRecv() int64 {
  return p.UserIdRecv
}
func (p *AddFriendReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFriendReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserIdSend = v
}
  return nil
}

func (p *AddFriendReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserIdRecv = v
}
  return nil
}

func (p *AddFriendReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddFriendReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdSend", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UserIdSend: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdSend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdSend (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UserIdSend: ", p), err) }
  return err
}

func (p *AddFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserIdRecv", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserIdRecv: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserIdRecv)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.UserIdRecv (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserIdRecv: ", p), err) }
  return err
}

func (p *AddFriendReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFriendReq(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreateTime
type AddFriendResp struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  CreateTime int64 `thrift:"CreateTime,2" db:"CreateTime" json:"CreateTime"`
}

func NewAddFriendResp() *AddFriendResp {
  return &AddFriendResp{}
}


func (p *AddFriendResp) GetID() int64 {
  return p.ID
}

func (p *AddFriendResp) GetCreateTime() int64 {
  return p.CreateTime
}
func (p *AddFriendResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFriendResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *AddFriendResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *AddFriendResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddFriendResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFriendResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *AddFriendResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CreateTime: ", p), err) }
  return err
}

func (p *AddFriendResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFriendResp(%+v)", *p)
}

// Attributes:
//  - ID
//  - Status
type ReplyAddFriendReq struct {
  ID int64 `thrift:"Id,1" db:"Id" json:"Id"`
  Status int32 `thrift:"Status,2" db:"Status" json:"Status"`
}

func NewReplyAddFriendReq() *ReplyAddFriendReq {
  return &ReplyAddFriendReq{}
}


func (p *ReplyAddFriendReq) GetID() int64 {
  return p.ID
}

func (p *ReplyAddFriendReq) GetStatus() int32 {
  return p.Status
}
func (p *ReplyAddFriendReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplyAddFriendReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ReplyAddFriendReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *ReplyAddFriendReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReplyAddFriendReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplyAddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Id: ", p), err) }
  return err
}

func (p *ReplyAddFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Status: ", p), err) }
  return err
}

func (p *ReplyAddFriendReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplyAddFriendReq(%+v)", *p)
}

// Attributes:
//  - Status
type ReplyAddFriendResp struct {
  Status int32 `thrift:"Status,1" db:"Status" json:"Status"`
}

func NewReplyAddFriendResp() *ReplyAddFriendResp {
  return &ReplyAddFriendResp{}
}


func (p *ReplyAddFriendResp) GetStatus() int32 {
  return p.Status
}
func (p *ReplyAddFriendResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplyAddFriendResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *ReplyAddFriendResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReplyAddFriendResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplyAddFriendResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Status: ", p), err) }
  return err
}

func (p *ReplyAddFriendResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplyAddFriendResp(%+v)", *p)
}

type Server interface {
  // Parameters:
  //  - Req
  CreateUser(ctx context.Context, req *CreateUserReq) (r *CreateUserResp, err error)
  // Parameters:
  //  - Req
  Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error)
  // Parameters:
  //  - Req
  Logout(ctx context.Context, req *LogoutReq) (r *LogoutResp, err error)
  // Parameters:
  //  - Req
  SendMessage(ctx context.Context, req *SendMessageReq) (r *SendMessageResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(ctx context.Context, req *HeartBeatReq) (r *HeartBeatResp, err error)
  // Parameters:
  //  - Req
  FetchFriendsList(ctx context.Context, req *FetchFriendsListReq) (r *FetchFriendsListResp, err error)
  // Parameters:
  //  - Req
  FetchOfflineMessage(ctx context.Context, req *FetchOfflineMessageReq) (r *FetchOfflineMessageResp, err error)
  // Parameters:
  //  - Req
  UploadObject(ctx context.Context, req *UploadObjectReq) (r *UploadObjectResp, err error)
  // Parameters:
  //  - Req
  AddFriend(ctx context.Context, req *AddFriendReq) (r *AddFriendResp, err error)
  // Parameters:
  //  - Req
  ReplyAddFriend(ctx context.Context, req *ReplyAddFriendReq) (r *ReplyAddFriendResp, err error)
  // Parameters:
  //  - Req
  MessageDelivered(ctx context.Context, req *MessageDeliveredReq) (r *MessageDeliveredResp, err error)
}

type ServerClient struct {
  c thrift.TClient
}

func NewServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServerClient {
  return &ServerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServerClient {
  return &ServerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewServerClient(c thrift.TClient) *ServerClient {
  return &ServerClient{
    c: c,
  }
}

func (p *ServerClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *ServerClient) CreateUser(ctx context.Context, req *CreateUserReq) (r *CreateUserResp, err error) {
  var _args4 ServerCreateUserArgs
  _args4.Req = req
  var _result5 ServerCreateUserResult
  if err = p.Client_().Call(ctx, "CreateUser", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) Login(ctx context.Context, req *LoginReq) (r *LoginResp, err error) {
  var _args6 ServerLoginArgs
  _args6.Req = req
  var _result7 ServerLoginResult
  if err = p.Client_().Call(ctx, "Login", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) Logout(ctx context.Context, req *LogoutReq) (r *LogoutResp, err error) {
  var _args8 ServerLogoutArgs
  _args8.Req = req
  var _result9 ServerLogoutResult
  if err = p.Client_().Call(ctx, "Logout", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) SendMessage(ctx context.Context, req *SendMessageReq) (r *SendMessageResp, err error) {
  var _args10 ServerSendMessageArgs
  _args10.Req = req
  var _result11 ServerSendMessageResult
  if err = p.Client_().Call(ctx, "SendMessage", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) HeartBeat(ctx context.Context, req *HeartBeatReq) (r *HeartBeatResp, err error) {
  var _args12 ServerHeartBeatArgs
  _args12.Req = req
  var _result13 ServerHeartBeatResult
  if err = p.Client_().Call(ctx, "HeartBeat", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) FetchFriendsList(ctx context.Context, req *FetchFriendsListReq) (r *FetchFriendsListResp, err error) {
  var _args14 ServerFetchFriendsListArgs
  _args14.Req = req
  var _result15 ServerFetchFriendsListResult
  if err = p.Client_().Call(ctx, "FetchFriendsList", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) FetchOfflineMessage(ctx context.Context, req *FetchOfflineMessageReq) (r *FetchOfflineMessageResp, err error) {
  var _args16 ServerFetchOfflineMessageArgs
  _args16.Req = req
  var _result17 ServerFetchOfflineMessageResult
  if err = p.Client_().Call(ctx, "FetchOfflineMessage", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) UploadObject(ctx context.Context, req *UploadObjectReq) (r *UploadObjectResp, err error) {
  var _args18 ServerUploadObjectArgs
  _args18.Req = req
  var _result19 ServerUploadObjectResult
  if err = p.Client_().Call(ctx, "UploadObject", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) AddFriend(ctx context.Context, req *AddFriendReq) (r *AddFriendResp, err error) {
  var _args20 ServerAddFriendArgs
  _args20.Req = req
  var _result21 ServerAddFriendResult
  if err = p.Client_().Call(ctx, "AddFriend", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) ReplyAddFriend(ctx context.Context, req *ReplyAddFriendReq) (r *ReplyAddFriendResp, err error) {
  var _args22 ServerReplyAddFriendArgs
  _args22.Req = req
  var _result23 ServerReplyAddFriendResult
  if err = p.Client_().Call(ctx, "ReplyAddFriend", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ServerClient) MessageDelivered(ctx context.Context, req *MessageDeliveredReq) (r *MessageDeliveredResp, err error) {
  var _args24 ServerMessageDeliveredArgs
  _args24.Req = req
  var _result25 ServerMessageDeliveredResult
  if err = p.Client_().Call(ctx, "MessageDelivered", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

type ServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Server
}

func (p *ServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewServerProcessor(handler Server) *ServerProcessor {

  self26 := &ServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self26.processorMap["CreateUser"] = &serverProcessorCreateUser{handler:handler}
  self26.processorMap["Login"] = &serverProcessorLogin{handler:handler}
  self26.processorMap["Logout"] = &serverProcessorLogout{handler:handler}
  self26.processorMap["SendMessage"] = &serverProcessorSendMessage{handler:handler}
  self26.processorMap["HeartBeat"] = &serverProcessorHeartBeat{handler:handler}
  self26.processorMap["FetchFriendsList"] = &serverProcessorFetchFriendsList{handler:handler}
  self26.processorMap["FetchOfflineMessage"] = &serverProcessorFetchOfflineMessage{handler:handler}
  self26.processorMap["UploadObject"] = &serverProcessorUploadObject{handler:handler}
  self26.processorMap["AddFriend"] = &serverProcessorAddFriend{handler:handler}
  self26.processorMap["ReplyAddFriend"] = &serverProcessorReplyAddFriend{handler:handler}
  self26.processorMap["MessageDelivered"] = &serverProcessorMessageDelivered{handler:handler}
return self26
}

func (p *ServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x27 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x27.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x27

}

type serverProcessorCreateUser struct {
  handler Server
}

func (p *serverProcessorCreateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerCreateUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerCreateUserResult{}
var retval *CreateUserResp
  var err2 error
  if retval, err2 = p.handler.CreateUser(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateUser: " + err2.Error())
    oprot.WriteMessageBegin("CreateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CreateUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorLogin struct {
  handler Server
}

func (p *serverProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerLoginResult{}
var retval *LoginResp
  var err2 error
  if retval, err2 = p.handler.Login(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: " + err2.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorLogout struct {
  handler Server
}

func (p *serverProcessorLogout) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerLogoutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerLogoutResult{}
var retval *LogoutResp
  var err2 error
  if retval, err2 = p.handler.Logout(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Logout: " + err2.Error())
    oprot.WriteMessageBegin("Logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Logout", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorSendMessage struct {
  handler Server
}

func (p *serverProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerSendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerSendMessageResult{}
var retval *SendMessageResp
  var err2 error
  if retval, err2 = p.handler.SendMessage(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendMessage: " + err2.Error())
    oprot.WriteMessageBegin("SendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorHeartBeat struct {
  handler Server
}

func (p *serverProcessorHeartBeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerHeartBeatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("HeartBeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerHeartBeatResult{}
var retval *HeartBeatResp
  var err2 error
  if retval, err2 = p.handler.HeartBeat(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HeartBeat: " + err2.Error())
    oprot.WriteMessageBegin("HeartBeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("HeartBeat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorFetchFriendsList struct {
  handler Server
}

func (p *serverProcessorFetchFriendsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerFetchFriendsListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FetchFriendsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerFetchFriendsListResult{}
var retval *FetchFriendsListResp
  var err2 error
  if retval, err2 = p.handler.FetchFriendsList(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FetchFriendsList: " + err2.Error())
    oprot.WriteMessageBegin("FetchFriendsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FetchFriendsList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorFetchOfflineMessage struct {
  handler Server
}

func (p *serverProcessorFetchOfflineMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerFetchOfflineMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FetchOfflineMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerFetchOfflineMessageResult{}
var retval *FetchOfflineMessageResp
  var err2 error
  if retval, err2 = p.handler.FetchOfflineMessage(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FetchOfflineMessage: " + err2.Error())
    oprot.WriteMessageBegin("FetchOfflineMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FetchOfflineMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorUploadObject struct {
  handler Server
}

func (p *serverProcessorUploadObject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerUploadObjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UploadObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerUploadObjectResult{}
var retval *UploadObjectResp
  var err2 error
  if retval, err2 = p.handler.UploadObject(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadObject: " + err2.Error())
    oprot.WriteMessageBegin("UploadObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("UploadObject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorAddFriend struct {
  handler Server
}

func (p *serverProcessorAddFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerAddFriendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerAddFriendResult{}
var retval *AddFriendResp
  var err2 error
  if retval, err2 = p.handler.AddFriend(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddFriend: " + err2.Error())
    oprot.WriteMessageBegin("AddFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AddFriend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorReplyAddFriend struct {
  handler Server
}

func (p *serverProcessorReplyAddFriend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerReplyAddFriendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReplyAddFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerReplyAddFriendResult{}
var retval *ReplyAddFriendResp
  var err2 error
  if retval, err2 = p.handler.ReplyAddFriend(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReplyAddFriend: " + err2.Error())
    oprot.WriteMessageBegin("ReplyAddFriend", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReplyAddFriend", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type serverProcessorMessageDelivered struct {
  handler Server
}

func (p *serverProcessorMessageDelivered) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServerMessageDeliveredArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MessageDelivered", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServerMessageDeliveredResult{}
var retval *MessageDeliveredResp
  var err2 error
  if retval, err2 = p.handler.MessageDelivered(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MessageDelivered: " + err2.Error())
    oprot.WriteMessageBegin("MessageDelivered", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MessageDelivered", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type ServerCreateUserArgs struct {
  Req *CreateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerCreateUserArgs() *ServerCreateUserArgs {
  return &ServerCreateUserArgs{}
}

var ServerCreateUserArgs_Req_DEFAULT *CreateUserReq
func (p *ServerCreateUserArgs) GetReq() *CreateUserReq {
  if !p.IsSetReq() {
    return ServerCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerCreateUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerCreateUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerCreateUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &CreateUserReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerCreateUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerCreateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerCreateUserResult struct {
  Success *CreateUserResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerCreateUserResult() *ServerCreateUserResult {
  return &ServerCreateUserResult{}
}

var ServerCreateUserResult_Success_DEFAULT *CreateUserResp
func (p *ServerCreateUserResult) GetSuccess() *CreateUserResp {
  if !p.IsSetSuccess() {
    return ServerCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerCreateUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerCreateUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerCreateUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CreateUserResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerCreateUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerCreateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerCreateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerLoginArgs struct {
  Req *LoginReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerLoginArgs() *ServerLoginArgs {
  return &ServerLoginArgs{}
}

var ServerLoginArgs_Req_DEFAULT *LoginReq
func (p *ServerLoginArgs) GetReq() *LoginReq {
  if !p.IsSetReq() {
    return ServerLoginArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerLoginArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &LoginReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerLoginResult struct {
  Success *LoginResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerLoginResult() *ServerLoginResult {
  return &ServerLoginResult{}
}

var ServerLoginResult_Success_DEFAULT *LoginResp
func (p *ServerLoginResult) GetSuccess() *LoginResp {
  if !p.IsSetSuccess() {
    return ServerLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LoginResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerLoginResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerLogoutArgs struct {
  Req *LogoutReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerLogoutArgs() *ServerLogoutArgs {
  return &ServerLogoutArgs{}
}

var ServerLogoutArgs_Req_DEFAULT *LogoutReq
func (p *ServerLogoutArgs) GetReq() *LogoutReq {
  if !p.IsSetReq() {
    return ServerLogoutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerLogoutArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerLogoutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerLogoutArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &LogoutReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerLogoutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Logout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerLogoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerLogoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerLogoutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerLogoutResult struct {
  Success *LogoutResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerLogoutResult() *ServerLogoutResult {
  return &ServerLogoutResult{}
}

var ServerLogoutResult_Success_DEFAULT *LogoutResp
func (p *ServerLogoutResult) GetSuccess() *LogoutResp {
  if !p.IsSetSuccess() {
    return ServerLogoutResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerLogoutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerLogoutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerLogoutResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LogoutResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerLogoutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Logout_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerLogoutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerLogoutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerLogoutResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerSendMessageArgs struct {
  Req *SendMessageReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerSendMessageArgs() *ServerSendMessageArgs {
  return &ServerSendMessageArgs{}
}

var ServerSendMessageArgs_Req_DEFAULT *SendMessageReq
func (p *ServerSendMessageArgs) GetReq() *SendMessageReq {
  if !p.IsSetReq() {
    return ServerSendMessageArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerSendMessageArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerSendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &SendMessageReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerSendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerSendMessageResult struct {
  Success *SendMessageResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerSendMessageResult() *ServerSendMessageResult {
  return &ServerSendMessageResult{}
}

var ServerSendMessageResult_Success_DEFAULT *SendMessageResp
func (p *ServerSendMessageResult) GetSuccess() *SendMessageResp {
  if !p.IsSetSuccess() {
    return ServerSendMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerSendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerSendMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SendMessageResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerSendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerHeartBeatArgs struct {
  Req *HeartBeatReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerHeartBeatArgs() *ServerHeartBeatArgs {
  return &ServerHeartBeatArgs{}
}

var ServerHeartBeatArgs_Req_DEFAULT *HeartBeatReq
func (p *ServerHeartBeatArgs) GetReq() *HeartBeatReq {
  if !p.IsSetReq() {
    return ServerHeartBeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerHeartBeatArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerHeartBeatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerHeartBeatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &HeartBeatReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerHeartBeatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerHeartBeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerHeartBeatResult struct {
  Success *HeartBeatResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerHeartBeatResult() *ServerHeartBeatResult {
  return &ServerHeartBeatResult{}
}

var ServerHeartBeatResult_Success_DEFAULT *HeartBeatResp
func (p *ServerHeartBeatResult) GetSuccess() *HeartBeatResp {
  if !p.IsSetSuccess() {
    return ServerHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerHeartBeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerHeartBeatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerHeartBeatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HeartBeatResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerHeartBeatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerHeartBeatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerHeartBeatResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerFetchFriendsListArgs struct {
  Req *FetchFriendsListReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerFetchFriendsListArgs() *ServerFetchFriendsListArgs {
  return &ServerFetchFriendsListArgs{}
}

var ServerFetchFriendsListArgs_Req_DEFAULT *FetchFriendsListReq
func (p *ServerFetchFriendsListArgs) GetReq() *FetchFriendsListReq {
  if !p.IsSetReq() {
    return ServerFetchFriendsListArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerFetchFriendsListArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerFetchFriendsListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerFetchFriendsListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &FetchFriendsListReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerFetchFriendsListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchFriendsList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerFetchFriendsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerFetchFriendsListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerFetchFriendsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerFetchFriendsListResult struct {
  Success *FetchFriendsListResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerFetchFriendsListResult() *ServerFetchFriendsListResult {
  return &ServerFetchFriendsListResult{}
}

var ServerFetchFriendsListResult_Success_DEFAULT *FetchFriendsListResp
func (p *ServerFetchFriendsListResult) GetSuccess() *FetchFriendsListResp {
  if !p.IsSetSuccess() {
    return ServerFetchFriendsListResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerFetchFriendsListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerFetchFriendsListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerFetchFriendsListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FetchFriendsListResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerFetchFriendsListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchFriendsList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerFetchFriendsListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerFetchFriendsListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerFetchFriendsListResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerFetchOfflineMessageArgs struct {
  Req *FetchOfflineMessageReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerFetchOfflineMessageArgs() *ServerFetchOfflineMessageArgs {
  return &ServerFetchOfflineMessageArgs{}
}

var ServerFetchOfflineMessageArgs_Req_DEFAULT *FetchOfflineMessageReq
func (p *ServerFetchOfflineMessageArgs) GetReq() *FetchOfflineMessageReq {
  if !p.IsSetReq() {
    return ServerFetchOfflineMessageArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerFetchOfflineMessageArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerFetchOfflineMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerFetchOfflineMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &FetchOfflineMessageReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerFetchOfflineMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchOfflineMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerFetchOfflineMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerFetchOfflineMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerFetchOfflineMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerFetchOfflineMessageResult struct {
  Success *FetchOfflineMessageResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerFetchOfflineMessageResult() *ServerFetchOfflineMessageResult {
  return &ServerFetchOfflineMessageResult{}
}

var ServerFetchOfflineMessageResult_Success_DEFAULT *FetchOfflineMessageResp
func (p *ServerFetchOfflineMessageResult) GetSuccess() *FetchOfflineMessageResp {
  if !p.IsSetSuccess() {
    return ServerFetchOfflineMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerFetchOfflineMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerFetchOfflineMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerFetchOfflineMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FetchOfflineMessageResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerFetchOfflineMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FetchOfflineMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerFetchOfflineMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerFetchOfflineMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerFetchOfflineMessageResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerUploadObjectArgs struct {
  Req *UploadObjectReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerUploadObjectArgs() *ServerUploadObjectArgs {
  return &ServerUploadObjectArgs{}
}

var ServerUploadObjectArgs_Req_DEFAULT *UploadObjectReq
func (p *ServerUploadObjectArgs) GetReq() *UploadObjectReq {
  if !p.IsSetReq() {
    return ServerUploadObjectArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerUploadObjectArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerUploadObjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerUploadObjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &UploadObjectReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerUploadObjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadObject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerUploadObjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerUploadObjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerUploadObjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerUploadObjectResult struct {
  Success *UploadObjectResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerUploadObjectResult() *ServerUploadObjectResult {
  return &ServerUploadObjectResult{}
}

var ServerUploadObjectResult_Success_DEFAULT *UploadObjectResp
func (p *ServerUploadObjectResult) GetSuccess() *UploadObjectResp {
  if !p.IsSetSuccess() {
    return ServerUploadObjectResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerUploadObjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerUploadObjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerUploadObjectResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UploadObjectResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerUploadObjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UploadObject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerUploadObjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerUploadObjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerUploadObjectResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerAddFriendArgs struct {
  Req *AddFriendReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerAddFriendArgs() *ServerAddFriendArgs {
  return &ServerAddFriendArgs{}
}

var ServerAddFriendArgs_Req_DEFAULT *AddFriendReq
func (p *ServerAddFriendArgs) GetReq() *AddFriendReq {
  if !p.IsSetReq() {
    return ServerAddFriendArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerAddFriendArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerAddFriendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerAddFriendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &AddFriendReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerAddFriendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddFriend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerAddFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerAddFriendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerAddFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerAddFriendResult struct {
  Success *AddFriendResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerAddFriendResult() *ServerAddFriendResult {
  return &ServerAddFriendResult{}
}

var ServerAddFriendResult_Success_DEFAULT *AddFriendResp
func (p *ServerAddFriendResult) GetSuccess() *AddFriendResp {
  if !p.IsSetSuccess() {
    return ServerAddFriendResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerAddFriendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerAddFriendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerAddFriendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddFriendResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerAddFriendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddFriend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerAddFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerAddFriendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerAddFriendResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerReplyAddFriendArgs struct {
  Req *ReplyAddFriendReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerReplyAddFriendArgs() *ServerReplyAddFriendArgs {
  return &ServerReplyAddFriendArgs{}
}

var ServerReplyAddFriendArgs_Req_DEFAULT *ReplyAddFriendReq
func (p *ServerReplyAddFriendArgs) GetReq() *ReplyAddFriendReq {
  if !p.IsSetReq() {
    return ServerReplyAddFriendArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerReplyAddFriendArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerReplyAddFriendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerReplyAddFriendArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ReplyAddFriendReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerReplyAddFriendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReplyAddFriend_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerReplyAddFriendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerReplyAddFriendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerReplyAddFriendArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerReplyAddFriendResult struct {
  Success *ReplyAddFriendResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerReplyAddFriendResult() *ServerReplyAddFriendResult {
  return &ServerReplyAddFriendResult{}
}

var ServerReplyAddFriendResult_Success_DEFAULT *ReplyAddFriendResp
func (p *ServerReplyAddFriendResult) GetSuccess() *ReplyAddFriendResp {
  if !p.IsSetSuccess() {
    return ServerReplyAddFriendResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerReplyAddFriendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerReplyAddFriendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerReplyAddFriendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReplyAddFriendResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerReplyAddFriendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReplyAddFriend_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerReplyAddFriendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerReplyAddFriendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerReplyAddFriendResult(%+v)", *p)
}

// Attributes:
//  - Req
type ServerMessageDeliveredArgs struct {
  Req *MessageDeliveredReq `thrift:"req,1" db:"req" json:"req"`
}

func NewServerMessageDeliveredArgs() *ServerMessageDeliveredArgs {
  return &ServerMessageDeliveredArgs{}
}

var ServerMessageDeliveredArgs_Req_DEFAULT *MessageDeliveredReq
func (p *ServerMessageDeliveredArgs) GetReq() *MessageDeliveredReq {
  if !p.IsSetReq() {
    return ServerMessageDeliveredArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ServerMessageDeliveredArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ServerMessageDeliveredArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerMessageDeliveredArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &MessageDeliveredReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ServerMessageDeliveredArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageDelivered_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerMessageDeliveredArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ServerMessageDeliveredArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerMessageDeliveredArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServerMessageDeliveredResult struct {
  Success *MessageDeliveredResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServerMessageDeliveredResult() *ServerMessageDeliveredResult {
  return &ServerMessageDeliveredResult{}
}

var ServerMessageDeliveredResult_Success_DEFAULT *MessageDeliveredResp
func (p *ServerMessageDeliveredResult) GetSuccess() *MessageDeliveredResp {
  if !p.IsSetSuccess() {
    return ServerMessageDeliveredResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServerMessageDeliveredResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServerMessageDeliveredResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerMessageDeliveredResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MessageDeliveredResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServerMessageDeliveredResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageDelivered_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerMessageDeliveredResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServerMessageDeliveredResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerMessageDeliveredResult(%+v)", *p)
}


